---
swagger: '2.0'
info:
  description: 'This is a sample server Petstore server'
  version: 1.0.0
  title: Swagger Petstore
  termsOfService: http://helloreverb.com/terms/
  contact:
    email: apiteam@wordnik.com
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
host: petstore.swagger.io
basePath: "/v2"
schemes:
- http
parameters:

  optional_pet_id:
    description: An Optional Filter by pet_id.
    in: query
    name: pet_id
    required: true
    type: integer
    x-related-info:
      rest_resource_name: pets
      label: name

  optional_pet_name:
    description: A name for a given pet.
    in: query
    name: name
    required: false
    type: string
    minLength: 3
    maxLength: 10

  optional_last_eaten_range:
    description: An optional last_eaten range filter
    in: query
    name: last_eaten
    required: false
    type: string
    x-filter:
      format: date-time
      range: true

  optional_user_id:
    description: An Optional Filter by user_id.
    in: query
    name: user_id
    required: true
    type: integer

  pet_id:
    description: A unique integer value identifying the pet.
    in: path
    name: pet_id
    required: true
    type: integer

  user_id:
    description: A unique integer value identifying the user.
    in: path
    name: user_id
    required: true
    type: integer

  category_id:
    description: A unique integer value identifying the category.
    in: path
    name: category_id
    required: true
    type: integer

paths:

  /ops/get_pets_under_category/{category_id}:
    parameters:
      - $ref: '#/parameters/category_id'
    get:
      description: 'Get a list of all pets under the specified category.'
      operationId: get_sites_under_category
      x-admin-exclude: true
      produces:
        - application/json
      responses:
        200:
          description: ''
          schema:
            type: array
            items:
              $ref: '#/definitions/pet'
        403:
          description: 'Forbidden'
      tags:
        - operational

  /pets:
    get:
      operationId: pet_list
      x-permissions:
      - 'pet:read'
      parameters:
      - $ref: "#/parameters/optional_pet_id"
      - $ref: "#/parameters/optional_pet_name"
      - $ref: "#/parameters/optional_last_eaten_range"
      - name: pet_ids
        description: An optional list of pet ids
        in: query
        type: array
        items:
          type: integer
        required: false
        minItems: 0
        collectionFormat: multi
        uniqueItems: true
      produces:
      - application/json
      responses:
        '200':
          description: ''
          schema:
            type: array
            items:
              $ref: "#/definitions/pet"
      tags:
      - pets_api
    post:
      consumes:
      - application/json
      operationId: pet_create
      x-permissions:
      - 'pet:create'
      parameters:
      - in: body
        name: data
        schema:
          $ref: "#/definitions/pet_create"
      produces:
      - application/json
      responses:
        '201':
          description: ''
          schema:
            $ref: "#/definitions/pet"
      tags:
      - pets_api

  /pets/{pet_id}:
    parameters:
    - $ref: "#/parameters/pet_id"
    delete:
      operationId: pet_delete
      x-permissions:
      - 'pet:delete'
      responses:
        '204':
          description: ''
      tags:
      - pets_api
    get:
      operationId: pet_read
      x-permissions:
      - 'pet:read'
      produces:
      - application/json
      responses:
        '200':
          description: ''
          schema:
            $ref: "#/definitions/pet"
      tags:
      - pets_api
    put:
      consumes:
      - application/json
      operationId: pet_update
      x-permissions:
      - 'pet:update'
      parameters:
      - in: body
        name: data
        schema:
          $ref: "#/definitions/pet_update"
      produces:
      - application/json
      responses:
        '200':
          description: ''
          schema:
            $ref: "#/definitions/pet"
      tags:
      - pets_api

  /users:
    get:
      operationId: user_list
      x-permissions:
      - 'user:read'
      parameters:
      - $ref: "#/parameters/optional_user_id"
      - name: user_ids
        description: An optional list of user ids
        in: query
        type: array
        items:
          type: integer
        required: false
        minItems: 0
        collectionFormat: multi
        uniqueItems: true
      produces:
      - application/json
      responses:
        '200':
          description: ''
          schema:
            type: array
            items:
              $ref: "#/definitions/user"
      tags:
      - pets_api

  /users/{user_id}:
    parameters:
    - $ref: "#/parameters/user_id"
    get:
      operationId: user_read
      x-permissions:
      - 'user:read'
      produces:
      - application/json
      responses:
        '200':
          description: ''
          schema:
            $ref: "#/definitions/user"
      tags:
      - pets_api
    put:
      consumes:
      - application/json
      operationId: user_update
      x-permissions:
      - 'pet:update'
      parameters:
      - in: body
        name: data
        schema:
          $ref: "#/definitions/user_update"
      produces:
      - application/json
      responses:
        '200':
          description: ''
          schema:
            $ref: "#/definitions/user"
      tags:
      - pets_api

  /categories:
    get:
      operationId: category_list
      x-permissions:
      - 'category:read'
      parameters:
      - name: category_ids
        description: An optional list of category ids
        in: query
        type: array
        items:
          type: integer
        required: false
        minItems: 0
        collectionFormat: multi
        uniqueItems: true
      produces:
      - application/json
      responses:
        '200':
          description: ''
          schema:
            type: array
            items:
              $ref: "#/definitions/category"
      tags:
      - pets_api
    post:
      consumes:
      - application/json
      operationId: category_create
      x-permissions:
      - 'category:create'
      parameters:
      - in: body
        name: data
        schema:
          $ref: "#/definitions/category_create"
      produces:
      - application/json
      responses:
        '201':
          description: ''
          schema:
            $ref: "#/definitions/category"
      tags:
      - pets_api

  /categories/{category_id}:
    parameters:
    - $ref: "#/parameters/category_id"
    delete:
      operationId: category_delete
      x-permissions:
      - 'category:delete'
      responses:
        '204':
          description: ''
      tags:
      - pets_api
    get:
      operationId: category_read
      x-permissions:
      - 'category:read'
      produces:
      - application/json
      responses:
        '200':
          description: ''
          schema:
            $ref: "#/definitions/category"
      tags:
      - pets_api

securityDefinitions:
  api_key:
    type: apiKey
    name: api_key
    in: header
  petstore_auth:
    type: oauth2
    authorizationUrl: http://petstore.swagger.io/api/oauth/dialog
    flow: implicit
    scopes:
      write:pets: modify pets in your account
      read:pets: read your pets

definitions:

  user:
    properties:
      id:
        type: integer
        format: int64
        readOnly: true
      username:
        type: string
      firstName:
        type: string
      lastName:
        type: string
      email:
        type: string
      password:
        type: string
      phone:
        type: string
      userStatus:
        type: integer
        format: int32
        description: User Status
    xml:
      name: User

  user_update:
    properties:
      username:
        type: string
      firstName:
        type: string
      lastName:
        type: string
      email:
        type: string
      phone:
        type: string
    required:
    - username
    - firstName
    - lastName
    - email

  category:
    properties:
      id:
        type: integer
        format: int64
        readOnly: true
      name:
        type: string
      info:
        type: string
        format: uri
      created_at:
        type: string
        format: date-time
      updated_at:
        type: string
        format: date-time
    xml:
      name: Category

  category_create:
    properties:
      name:
        type: string
        minLength: 2
        maxLength: 20
      info:
        type: string
        format: uri
    required:
    - name

  pet:
    properties:
      id:
        type: integer
        format: int64
        readOnly: true
      category_id:
        type: integer
        x-related-info:
          model: category
          rest_resource_name: categories
          field: id
          label: name
      name:
        type: string
        example: doggie
      metadata:
        type: object
      age:
        type: integer
      last_eaten:
        type: string
        format: date-time
      date_of_birth:
        type: string
        format: date
      status:
        type: string
        description: pet status in the store
        enum:
        - available
        - pending
        - sold
    xml:
      name: Pet

  pet_create:
    properties:
      category_id:
        type: integer
        x-related-info:
          model: category
          rest_resource_name: categories
          field: id
          label: name
      name:
        type: string
        example: doggie
        minLength: 2
      metadata:
        type: object
      age:
        type: integer
        minimum: 0
        maximum: 120
      last_eaten:
        type: string
        format: date-time
      photoUrls:
        type: array
        xml:
          name: photoUrl
          wrapped: true
        items:
          type: string
      status:
        type: string
        description: pet status in the store
        enum:
        - available
        - pending
        - sold
    required:
    - name
    - category_id

  pet_update:
    properties:
      category_id:
        type: integer
        x-related-info:
          model: category
          rest_resource_name: categories
          field: id
          label: name
      name:
        type: string
        example: doggie
        minLength: 2
      age:
        type: integer
        minimum: 0
        maximum: 120
      last_eaten:
        type: string
        format: date-time
      photoUrls:
        type: array
        xml:
          name: photoUrl
          wrapped: true
        items:
          type: string
      status:
        type: string
        description: pet status in the store
        enum:
        - available
        - pending
        - sold

x-detail-page-definitions:
  category:
    inlines:
    - model: pet
      rest_resource_name: pets
      label: Pets
      key: category_id
      fields:
      - name
      - date_of_birth
    sortable_fields:
    - id
  pet:
    sortable_fields:
    - id
    responsive_fields:
      primary: name
      secondary: date_of_birth
  user:
    responsive_fields:
      primary: username
      secondary: email
